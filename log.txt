{
TODO (1)
-id_to_ex_bus 在模拟波形中的后八位出现X态
--根据16进制指令，找到id_to_ex_bus后8位对应rdata2
---rdata2未初始化，在regfile.v中的rdata值是输出线，将当前模块返回到顶层模块中（这里是ID段）
----又发现根据 regfile.v 中 reg_array[raddr2] 这个代码，未能将值给到rdata2，说明当前寄存器未初始化，上一条指令还没有写入到寄存器中
-----在波形图中发现出现了数据相关问题，即ori操作在ex阶段时还未写入值到寄存器中，发现问题

                                
-数据相关：
--相邻指令间存在数据相关（ID、EX间存在数据相关）
--相隔一条指令的指令间存在数据相关（ID、MEM间存在数据相关）
--相隔两条指令的指令间存在数据相关（ID、WB间存在数据相关）


-添加数据前推通路：
--将EX段和MEM段引出一条通路连回ID段，传输数据参考WB段，同时在mycpu_core.v中增加相应的线路，这里用 ex(mem)_to_id_bus
---在ID段中继续参考WB段进行数据的接收，接下来应该处理对数据的处理，解决数据相关问题
----判断在EX，MEM，WB 段中是否出现和当前ID段需要访问的寄存器地址相等的情况，同时增加临时变量tdata1(2)，若有数据相关问题，赋值给tdata，代替rdata

TODO (2)
-继续添加部分指令，此时遇到 lw，sw 读写内存数据有问题
--应当增加 EX、MEM 中有关sram的功能
---这里的指令按照流水线一级一级传递，在每个周期内同步指令，应采用时序逻辑

-ID 段将指令传递给 EX 段
--EX 段接收，计算内存相关的操作:
---data_sram_wdata 传给顶层模块写入内存
---data_sram_addr  传给顶层模块写入内存
---data_sram_wen   传给顶层模块写入内存
---data_sram_en    传给顶层模块写入内存
---data_ram_sel    只在EX 段中出现，MEM 段中的data_ram_sel未定义,但是功能和data_ram_wen相同,在EX 段中将data_ram_wen同步为data_sram_wen
----由上分析，MEM 段似乎不需要增加其他连线,只需增加ID -> EX 间的关于读写内存指令的操作即可
-----通过一个点

-EX 段中的data_ram_en和data_ram_wen 出现 X 态
--这里先将内存操作位数传到EX和MEM段
---同时找到有关load的数据相关问题，准备进行处理
----书7.5节有关暂停机制讲解,在EX段中判断是否是load，并传回ID段，判断ID段的当前指令是否是出现load相关
-----EX段中应将load的信号传给ID段，ID段接受，并判断两个寄存器是否与前一条指令的写回地址相同（前面以及完成了数据前移操作）
-----因此在ID段中可以加入暂停操作
------加入后发现load的下一条指令的ID指令被修改,可能需要增加延迟槽进行管理, 又进一步修改数据迁移操作的相关指令后,通过8'd3

-根据波形图从头溯源,发现beq有问题（痛苦的过程）
-先找到当前汇编段的起点，发现当执行beq指令时，无法正确判断是否相等，根据书中的指令描述，发现一些指令设置错误
--经过重重调试，发现问题出在jalr这条指令，先将其注释掉，可以通过8'd12
---接着修改，增加inst_j指令后通过8'd15
----andi指令和xori指令未标识是否写入寄存器。。。修改后通过8'd36

-在实现bgezal等指令时，需要进行ALU计算，将当前的PC值加8写回到31号寄存器中，因此在修改时需要修改ALU部分
--

}

